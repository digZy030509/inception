{"version":3,"sources":["assets/icon.png","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","imageHandler","e","preventDefault","file","window","document","querySelector","files","reader","FileReader","readAsDataURL","onloadend","this","setState","images","result","bind","handleWait","message","handleResult","data","max","idx","labels","0","1","2","3","4","i","length","toFixed","state","predicting","model","undefined","tf","image","getElementsByTagName","img","fromPixels","resizeBilinear","mul","expandDims","prediction","predict","className","src","require","required","ref","type","name","accept","id","onChange","onClick","React","Component","App","Fragment","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+PAAAA,EAAOC,QAAU,IAA0B,kC,8NCG9BC,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgBVC,aAAe,SAACC,GACZA,EAAEC,iBACF,IAAIC,EAAOC,OAAOC,SAASC,cAAc,SAASC,MAAM,GACpDC,EAAS,IAAIC,WACPD,EAAOE,cAAcP,GAE/BK,EAAOG,UAAY,SAAUV,GACzBW,KAAKC,SAAS,CACVC,OAAQN,EAAOO,UAEjBC,KAJa,iBAvBJ,EA8BnBC,WAAa,WACT,EAAKJ,SAAS,CAACK,QAAS,iBA/BT,EAkCnBC,aAAe,SAACC,GAaZ,IAZA,IAAIC,EAAM,EACNC,EAAM,EACJC,EAAS,CACXC,EAAG,UACHC,EAAG,aACHC,EAAG,QACHC,EAAG,aACZC,EAAG,SAGMb,EAAS,GAELc,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,IACzBT,EAAKS,GAAKR,IACTA,EAAMD,EAAKS,GACXP,EAAM,CAACO,IAGfR,EAAMA,EAAIU,QAAQ,GACP,GAAPT,EACAP,EAAS,gBAAkBQ,EAAOD,GAAO,KAAW,IAAJD,EAAU,MAE1DN,EAAS,YAAcQ,EAAOD,GAAO,KAAW,IAAJD,EAAU,KAG7C,cAAfE,EAAOD,KACTP,GAAU,uNAEO,cAAfQ,EAAOD,KACTP,GAAU,qTAEO,SAAfQ,EAAOD,KACTP,GAAU,2LAEO,SAAfQ,EAAOD,KACTP,EAAS,4BAA8BQ,EAAOD,KAM1C,EAAKT,SAAS,CAACK,QAASH,KA1ExB,EAAKiB,MAAQ,CACTlB,OAAQ,GACRI,QAAS,IAEb,EAAKe,WAAa,EAAKA,WAAWjB,KAAhB,gBAClB,EAAKkB,WAAQC,EAPE,EADvB,0LAc2BC,IAAmB,4DAd9C,OAcQxB,KAAKsB,MAdb,6QAiFQtB,KAAKK,aAECoB,EAAQjC,OAAOC,SAASiC,qBAAqB,OAAO,GACpDC,EAAMH,IAAWI,WAAWH,GAAOI,eAAe,CAAC,IAAI,MAAM,GAAOC,IAAI,EAAG,KAAMC,WAAW,GAC5FC,EAAahC,KAAKsB,MAAMW,QAAQN,GArF9C,SAsF6BK,EAAWxB,OAtFxC,OAsFcL,EAtFd,OAwFQH,KAAKO,aAAaJ,GAxF1B,qIA4FQ,OAEI,yBAAK+B,UAAU,WAEX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,OAAOC,IAAKC,EAAQ,OAEvC,yBAAKF,UAAU,QACX,kDAEJ,2BAAOG,UAAQ,EAACC,IAAI,OAAOC,KAAK,OAAOC,KAAK,SAASC,OAAO,UAAUP,UAAU,cAAcQ,GAAG,OAASC,SAAU3C,KAAKZ,eACrI,yBAAK8C,UAAU,WAAWU,QAAS5C,KAAKqB,YAAxC,wBACY,6BAAMrB,KAAKoB,MAAMd,SACjB,6BACI,yBAAK6B,IAAKnC,KAAKoB,MAAMlB,OAAQgC,UAAU,qBA1G3D,GAA0BW,IAAMC,WCkBjBC,G,mLAXX,OACC,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWhE,U,GALnB2D,IAAMC,YCIJK,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhE,SAASiE,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5D,c","file":"static/js/main.1826bf86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.2e8d5e91.png\";","import React from 'react'\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nexport class Main extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            images: \"\",\r\n            message: \"\"\r\n        }\r\n        this.predicting = this.predicting.bind(this)\r\n        this.model = undefined\r\n      }\r\n\r\n      async componentDidMount() {\r\n        //   localStorage.setItem(\"model\", JSON.stringify(require(\"./model/model.json\")))\r\n        // const handler = tfn.io.fileSystem([require(\"./model/model.json\"), require(\"./model/weights.bin\")]);\r\n        this.model = await tf.loadLayersModel(\"https://calm-harbor-72858.herokuapp.com/model/model.json\")\r\n        // this.model = await tf.loadLayersModel(require(\"../../assets/model/model.json\"))\r\n      }\r\n\r\n    imageHandler = (e) => {\r\n        e.preventDefault();\r\n        var file = window.document.querySelector(\"#rice\").files[0];\r\n        var reader = new FileReader();\r\n        var url = reader.readAsDataURL(file);\r\n\r\n        reader.onloadend = function (e) {\r\n            this.setState({\r\n                images: reader.result\r\n            })\r\n            }.bind(this);\r\n    }\r\n\r\n    handleWait = () =>{\r\n        this.setState({message: \"Please Wait\"})\r\n    }\r\n\r\n    handleResult = (data) => {\r\n        var max = 0\r\n        var idx = 0\r\n        const labels = {\r\n            0: \"healthy\",\r\n            1: \"brown spot\",\r\n            2: \"hispa\",\r\n            3: \"leaf blast\",\r\n\t\t\t4: \"error\"\r\n\t\t\t\r\n        }\r\n        var result = \"\"\r\n\t\tvar info = \"\"\r\n        for(var i = 0; i < data.length; i++) {\r\n            if(data[i] > max) {\r\n                max = data[i]\r\n                idx = [i]\r\n            }\r\n        }\r\n        max = max.toFixed(4)\r\n        if (idx == 0){\r\n            result = \"Your rice is \" + labels[idx] + \" (\" + max*100 + \"%)\"\r\n        }else{\r\n            result = \"Disease: \" + labels[idx] + \" (\" + max*100 + \"%)\"\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(labels[idx] == \"leaf blast\") {\r\n\t\t\t\tresult += \" \\n a disease of rice caused by the fungus Pyricularia oryae, characterized by elliptical leaf spots with reddish-brown margins, brownish lesions and neck rot of the fruiting panicles, and stunting of the plant.\";\r\n\t\t\t}\r\n\t\t\tif(labels[idx] == \"brown spot\") {\r\n\t\t\t\tresult += \" \\n Brown spot is caused by the fungus Cochliobolus miyabeanus. Also called Helminthosporium leaf spot, it is one of the most prevalent rice diseases in Louisiana. When C. miyabeanus attacks the rice plants at emergence, the resulting seedling blight causes sparse or inadequate stands and weakened plants\";\r\n\t\t\t}\r\n\t\t\tif(labels[idx] == \"hispa\") {\r\n\t\t\t\tresult += \" \\n Rice hispa scrapes the upper surface of leaf blades leaving only the lower epidermis. It also tunnels through the leaf tissues. When damage is severe, plants become less vigorous.\";\r\n\t\t\t}\r\n\t\t\tif(labels[idx] == \"error\") {\r\n\t\t\t\tresult = \"ERROR: No Classification \" + labels[idx] ;\r\n\t\t\t}\r\n\t\t\t\r\n        }\r\n\r\n\r\n        this.setState({message: result})\r\n    }\r\n\r\n    async predicting(){\r\n        this.handleWait()\r\n\r\n        const image = window.document.getElementsByTagName('img')[1]\r\n        const img = tf.browser.fromPixels(image).resizeBilinear([224,224], false).mul(1./255.).expandDims(0)\r\n        const prediction = this.model.predict(img);\r\n        const result = await prediction.data()\r\n\r\n        this.handleResult(result)\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n\t\t\r\n            <div className=\"content\">\r\n\t\t\t\r\n                <div className=\"item\" >\r\n                    <img className=\"icon\" src={require(\"../../assets/icon.png\")} />\r\n                </div>\r\n                <div className=\"item\">\r\n                    <h4>Select Your Image</h4>\r\n                </div>\r\n                <input required ref=\"file\" type=\"file\" name=\"images\" accept=\"image/*\" className=\"item upload\" id=\"rice\"   onChange={this.imageHandler}/>\r\n\t\t\t\t<div className=\"item btn\" onClick={this.predicting}>Detect Rice Disease!</div>\r\n                <div>{this.state.message}</div>\r\n                <div>\r\n                    <img src={this.state.images} className=\"item image\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// export default Main","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport {Main} from './components/Main/Main'\r\nimport './App.css';\r\nimport './assets/style.css'\r\n\r\nclass App extends React.Component {\r\n  render(){\r\n    return (\r\n     <React.Fragment>\r\n       <Router>\r\n          <Route path=\"/\" component={Main} />\r\n       </Router>\r\n     </React.Fragment>\r\n  );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}